# GeminiによるIssueの定期的な自動トリアージを行うワークフロー
name: 📋 Gemini Scheduled Issue Triage

# ワークフローがトリガーされるイベントを設定
on:
  # cronスケジュール（毎時0分に実行）
  schedule:
    - cron: '0 * * * *'
  # 手動でワークフローを実行できるようにする
  workflow_dispatch: {}

# 実行されるジョブを定義
jobs:
  # ジョブID
  triage-issues:
    # ジョブのタイムアウト時間を10分に設定
    timeout-minutes: 10
    # ジョブを実行するランナーを指定
    runs-on: ubuntu-latest
    # ジョブに与える権限を設定
    permissions:
      contents: read          # リポジトリのコンテンツへの読み取り権限
      id-token: write        # OIDCトークンへの書き込み権限
      issues: write          # Issueへの書き込み権限
    # ジョブのステップを定義
    steps:
      # GitHub Appの認証トークンを生成するステップ
      - name: Generate GitHub App Token
        id: generate_token
        if: ${{ vars.APP_ID }} # APP_IDが設定されている場合のみ実行
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}           # GitHub AppのID
          private-key: ${{ secrets.PRIVATE_KEY }} # GitHub Appの秘密鍵

      # リポジトリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }} # 認証トークン

      # トリアージ対象のIssueを見つけるステップ
      - name: Find untriaged issues
        id: find_issues
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Finding issues without labels..."
          # ラベルが一つも付いていないIssueを検索
          NO_LABEL_ISSUES=$(gh issue list --repo ${{ github.repository }} --search "is:open is:issue no:label" --json number,title,body)

          echo "🏷️ Finding issues that need triage..."
          # "status/needs-triage" ラベルが付いているIssueを検索
          NEED_TRIAGE_ISSUES=$(gh issue list --repo ${{ github.repository }} --search "is:open is:issue label:\"status/needs-triage\"" --json number,title,body)

          echo "🔄 Merging and deduplicating issues..."
          # 2つの検索結果をマージし、重複を除外
          ISSUES=$(echo "$NO_LABEL_ISSUES" "$NEED_TRIAGE_ISSUES" | jq -c -s 'add | unique_by(.number)')

          echo "📝 Setting output for GitHub Actions..."
          # トリアージ対象のIssueをGitHub Actionsの出力に設定
          echo "issues_to_triage=$ISSUES" >> "$GITHUB_OUTPUT"

          echo "✅ Found $(echo "$ISSUES" | jq 'length') issues to triage! 🎯"

      # GeminiによるIssueトリアージを実行するメインステップ
      - name: Run Gemini Issue Triage
        # トリアージ対象のIssueが存在する場合のみ実行
        if: steps.find_issues.outputs.issues_to_triage != '[]'
        uses: google-gemini/gemini-cli-action@main
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          ISSUES_TO_TRIAGE: ${{ steps.find_issues.outputs.issues_to_triage }} # トリアージ対象のIssue
          REPOSITORY: ${{ github.repository }}
        with:
          # Gemini APIキーとGCPの認証情報をsecretsから設定
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          # Gemini CLIの動作設定
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh label list)",
                "run_shell_command(gh issue edit)",
                "run_shell_command(gh issue list)"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          # Geminiモデルへの指示（プロンプト）
          prompt: |
            You are an issue triage assistant. Analyze issues and apply appropriate labels.
            
            Steps:
            1. Run: `gh label list`
            2. Check environment variable: $ISSUES_TO_TRIAGE (JSON array of issues)
            3. For each issue, apply labels: `gh issue edit ISSUE_NUMBER --add-label "label1,label2"`. If available, set labels that follow the `kind/*`, `area/*`, and `priority/*` patterns.
            4. For each issue, if the `status/needs-triage` label is present, remove it using: `gh issue edit ISSUE_NUMBER --remove-label "status/needs-triage"`
            
            Guidelines:
            - Only use existing repository labels
            - Do not add comments
            - Triage each issue independently
