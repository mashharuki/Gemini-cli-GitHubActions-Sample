# GeminiによるIssueの自動トリアージを行うワークフロー
name: 🏷️ Gemini Automated Issue Triage

# ワークフローがトリガーされるイベントを設定
on:
  # Issueがオープンまたは再オープンされた時
  issues:
    types: [opened, reopened]
  # Issueにコメントが作成された時
  issue_comment:
    types: [created]
  # 手動でワークフローを実行できるようにする
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'トリアージ対象のIssue番号'
        required: true
        type: number

# 実行されるジョブを定義
jobs:
  # ジョブID
  triage-issue:
    # ジョブの実行条件
    if: >
      github.event_name == 'issues' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@gemini-cli /triage') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))
    # ジョブのタイムアウト時間を5分に設定
    timeout-minutes: 5
    # ジョブに与える権限を設定
    permissions:
      issues: write          # Issueへの書き込み権限
      contents: read         # リポジトリのコンテンツへの読み取り権限
      id-token: write        # OIDCトークンへの書き込み権限
    # 同時実行制御
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.issue.number }} # 同一Issueでの重複実行を防止
      cancel-in-progress: true # 進行中のジョブをキャンセル
    # ジョブを実行するランナーを指定
    runs-on: ubuntu-latest
    # ジョブのステップを定義
    steps:
      # GitHub Appの認証トークンを生成するステップ
      - name: Generate GitHub App Token
        id: generate_token
        if: ${{ vars.APP_ID }} # APP_IDが設定されている場合のみ実行
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}           # GitHub AppのID
          private-key: ${{ secrets.PRIVATE_KEY }} # GitHub Appの秘密鍵

      # リポジトリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }} # 認証トークン

      # GeminiによるIssueトリアージを実行するメインステップ
      - name: Run Gemini Issue Triage
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.issue.title }}   # Issueのタイトル
          ISSUE_BODY: ${{ github.event.issue.body }}     # Issueの本文
          ISSUE_NUMBER: ${{ github.event.issue.number }} # Issueの番号
          REPOSITORY: ${{ github.repository }}
        with:
          # Gemini APIキーとGCPの認証情報をsecretsから設定
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          # Gemini CLIの動作設定
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(gh label list)",
                "run_shell_command(gh issue edit)"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          # Geminiモデルへの指示（プロンプト）
          prompt: |
            You are an issue triage assistant. Analyze the current GitHub issue and apply the most appropriate existing labels.

            Steps:
            1. Run: `gh label list` to get all available labels.
            2. Review the issue title and body provided in the environment variables.
            3. Select the most relevant labels from the existing labels. If available, set labels that follow the `kind/*`, `area/*`, and `priority/*` patterns.
            4. Apply the selected labels to this issue using: `gh issue edit ISSUE_NUMBER --add-label "label1,label2"`
            5. If the `status/needs-triage` label is present, remove it using: `gh issue edit ISSUE_NUMBER --remove-label "status/needs-triage"`

            Guidelines:
            - Only use labels that already exist in the repository.
            - Do not add comments or modify the issue content.
            - Triage only the current issue.
            - Assign all applicable labels based on the issue content.
